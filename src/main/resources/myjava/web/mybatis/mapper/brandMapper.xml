<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="myjava.web.mybatis.mapper.brandMapper">

    <!--SQL snippet: Can predefine and use multiple times-->
    <sql id="brand_column">id, brand_name, company_name, ordered, description, status</sql>

    <!--Use Result Map can define each variable separately-->
    <!--
        id: unique identifier
        type: mapper type, the class you defined
    -->
    <resultMap id="brandResultMap" type="Brand">
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <!--example of using sql snippet-->
    <!--
    <select id="selectAll" resultType="Brand">
        select
            <include refid="brand_column" />
        from tb_brand;
    </select>
    -->

    <!--example of using result map-->
    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>

    <!--
        parameter placeholderï¼š
            1. #{}: select * from tb_brand where id = ?
            2. ${}: select * from tb_brand where id = 1
        when writing id < #{id}, we have to use escape character or CDATA block
            1. escape letter: &lt; : id &lt; #{id};
            2. CDATA block :  <![CDATA[ < ]]>
    -->
    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>

    <!--conditional query:-->
    <!--    <select id="selectByCondition" resultMap="brandResultMap">
            select *
            from tb_brand
            where
                status = #{status} and
                company_name like #{companyName} and
                brand_name like #{brandName}
        </select>-->

    <!--
        dynamically conditional query
            1. Use <if>
            2. Since and may cause flaws, use <where> instead
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>

    <!--
        dynamically query with single condition
        In case of no input:
            1. we can set <otherwise> for default, like 1=1
            2. we can use <where>
    -->
    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose><!--like switch-->
                <when test="status != null">
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    brand_name like #{brandName}
                </when>
                <!--            <otherwise>-->
                <!--                1 = 1-->
                <!--            </otherwise>-->
            </choose>
        </where>
    </select>


    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status})
    </insert>

    <update id="update">
        update tb_brand
        set brand_name   = #{brandName},
            company_name = #{companyName},
            ordered      = #{ordered},
            description  = #{description},
            status       = #{status}
        where id = #{id};
    </update>

    <update id="updateDynamically">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != '' ">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != '' ">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != '' ">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>

    <delete id="deleteById">
        delete from tb_brand where id = #{id};
    </delete>

    <!--
        mybatis makes collection a Map with key 'array' and value the specific array, like ids in example
            * default: array
            * Use @Param to change the name: void deleteByIds(@Param("ids") int[] ids); so collection below can be ids
    -->
    <delete id="deleteByIds">
        delete from tb_brand
        where id in
        <foreach collection="array" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

</mapper>